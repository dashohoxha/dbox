
* About

  DrupalBox is a template Drupal project that can be used to seed
  (create) a new Drupal project quickly and easily.

  The new project will contain:
  - A Drupal profile (which can also be based on the OpenAtrium
    profile).
  - Makefiles for downloading the Drupal core, all the needed
    modules, libraries, patches, etc.
  - Scripts for installing a minimal Ubuntu server inside a Docker
    container, with all the packages and configurations needed for
    running a Drupal application.
  - Scripts, modules, tools and docs that facilitate the development,
    including a dev-->test-->live workflow.

  
* Motivation

  The aim of this project is to be like a "Drupal-on-Rails" for
  helping the new Drupal developers to get started and for simplifying
  the life of the experienced Drupal developers.

  Usually a huge number of skills is needed in order to complete
  successfully a Drupal project, like: server management, web stack
  management, database management, knowledge of drush, Drupal
  profiles, frequently used modules, common Drupal development
  patterns and paradigms, etc. A new Drupal developer cannot possibly
  get all this skills in a short time, so he is not able to finish
  properly a Drupal application or it will take him a very long
  time. This project offers them a Drupal solution that works out of
  the box, with reasonable settings and configurations, which they can
  use as a starting point for developing their application.

  This project can also simplify the life of the experienced Drupal
  developers, by allowing them to get started quickly, and then
  customizing the solution as they wish.


* Create a new project

  A new project is created by renaming files of the template project
  and doing find/replace in them.

  #+BEGIN_EXAMPLE
  ### clone from github
  git clone https://github.com/dashohoxha/dbox.git
  cp -a dbox myproject
  cd myproject/

  # git checkout openatrium  ## optionally, use the branch 'openatrium'

  ### rename the project
  ./rename-project.sh  # see usage
  ./rename-project.sh labdoo:myproject lbd:proj

  ### create a git repo
  git init .
  git add .
  git commit -m 'Initial commit.'
  #+END_EXAMPLE

  The script ~rename-project.sh~ works by renaming files of the
  template project and doing find/replace in them. There are two
  parameters that are used to customize the template project: the
  /project name/ and the /project prefix/. In the template project
  they are represented by *labdoo* and *lbd*, which are then replaced
  in the new project by the new projectâ€™s name and prefix.

  Why these strange names? Why not use something like *example* and
  *xmp*, or *sample* and *smp*, or *template* and *tmp* etc.

  The main reason is exactly that they are strange names and so there
  is no risk of collision with other names used in a project. For
  example *xmp* or *template* or *tmp* maybe are used on the project
  for something else as well, and replacing them blindly with a new
  value may break the application.


* Install the new project

  Installation is done inside a Docker container. For instructions
  about installing Docker see: https://docs.docker.com/installation/

  + Create a working directory:
    #+BEGIN_EXAMPLE
    mkdir workdir/
    #+END_EXAMPLE

  + Link the docker directory inside the working directory: 
    #+BEGIN_EXAMPLE
    cd workdir/
    ln -s ../myproject/docker .
    #+END_EXAMPLE

  + Modify and customize the settings:
    #+BEGIN_EXAMPLE
    cp docker/settings.sh .
    vim settings.sh
    #+END_EXAMPLE

  + Build a Docker image:
    #+BEGIN_EXAMPLE
    docker/build.sh settings.sh
    tail -f logs/nohup-myproject-master-20150929.out
    less -r logs/nohup-myproject-master-20150929.out
    #+END_EXAMPLE
    This will create a docker image, named =myproject:master= with a
    minimal ubuntu system and everything that is needed for the normal
    work of the Drupal application.

  + Create a Docker container like this:
    #+BEGIN_EXAMPLE
    docker/create.sh
    #+END_EXAMPLE
    Then you can start and stop the container with =docker/start.sh=
    and =docker/stop.sh=, enter the shell of the container with
    =docker/enter.sh=, etc. If =development=true= is set on the
    settings, then the code of the profile of the application inside
    the container will be linked to the directory ~myproject/~.

  + If it is installed on a local machine (for testing or
    development), add the domain name =example.org= on ~/etc/hosts~:
    #+BEGIN_EXAMPLE
    127.0.0.1 example.org
    #+END_EXAMPLE
    This way it can be accessed by typing =https://example.org:444= on the
    browser location (not =https://127.0.0.1:444= or =https://localhost:444=).


* Documentation

  - Internal doc files:
    + [[https://github.com/dashohoxha/dbox/blob/master/README.org][README.org]] (this file)
    + [[https://github.com/dashohoxha/dbox/blob/master/dev/README.org][dev/README.org]] (tips for developers)
    + [[https://github.com/dashohoxha/dbox/blob/master/modules/features/README.org][modules/features/README.org]]

  - External docs:
    + http://info.btranslator.org/docs/html/btranslator-dev-tips.html
    + http://dashohoxha.fs.al/using-drupal-features-in-btranslator/
    + http://dashohoxha.fs.al/cloning-btranslator-server/

  - Other docs that may help:
    + http://info.btranslator.org/docker-workshop/
    + http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/
    + http://dashohoxha.fs.al/how-to-secure-ubuntu-server/
    + http://dashohoxha.fs.al/howto-manage-your-own-nameserver/
    + http://www.havetheknowhow.com/Configure-the-server/Install-ssmtp.html
    + http://arstechnica.com/security/2009/12/how-to-get-set-with-a-secure-sertificate-for-free/
