{"name":"DrupalBox","tagline":"A template Drupal project for starting new Drupal projects quickly.","body":"\r\n## About\r\n\r\n  DrupalBox is a template Drupal project that can be used to seed\r\n  (create) a new Drupal project quickly and easily.\r\n\r\n  The new project will contain:\r\n  - A Drupal profile (which can also be based on the OpenAtrium\r\n    profile).\r\n  - Makefiles for downloading the Drupal core, all the needed\r\n    modules, libraries, patches, etc.\r\n  - Scripts for installing a minimal Ubuntu server inside a Docker\r\n    container, with all the packages and configurations needed for\r\n    running a Drupal application.\r\n  - Scripts, modules, tools and docs that facilitate the development,\r\n    including a `dev-->test-->live` workflow.\r\n\r\n  \r\n## Motivation\r\n\r\n  The aim of this project is to be like a *\"Drupal-on-Rails\"* for\r\n  helping the new Drupal developers to get started and for simplifying\r\n  the life of the experienced Drupal developers.\r\n\r\n  Usually a huge number of skills is needed in order to complete\r\n  successfully a Drupal project, like: server management, web stack\r\n  management, database management, knowledge of drush, Drupal\r\n  profiles, frequently used modules, common Drupal development\r\n  patterns and paradigms, etc. A new Drupal developer cannot possibly\r\n  get all this skills in a short time, so he is not able to finish\r\n  properly a Drupal application or it will take him a very long\r\n  time. This project offers them a Drupal solution that works out of\r\n  the box, with reasonable settings and configurations, which they can\r\n  use as a starting point for developing their application.\r\n\r\n  This project can also simplify the life of the experienced Drupal\r\n  developers, by allowing them to get started quickly, and then\r\n  customizing the solution as they wish.\r\n\r\n\r\n## Create a new project\r\n\r\n  A new project is created by renaming files of the template project\r\n  and doing find/replace in them.\r\n\r\n  ```bash\r\n  ### clone from github\r\n  git clone https://github.com/dashohoxha/dbox.git\r\n  cp -a dbox myproject\r\n  cd myproject/\r\n\r\n  # git checkout openatrium  ## optionally, use the branch 'openatrium'\r\n\r\n  ### rename the project\r\n  ./rename-project.sh  # see usage\r\n  ./rename-project.sh labdoo:myproject lbd:proj\r\n\r\n  ### create a git repo\r\n  git init .\r\n  git add .\r\n  git commit -m 'Initial commit.'\r\n  ```\r\n\r\n  The script `rename-project.sh` works by renaming files of the\r\n  template project and doing find/replace in them. There are two\r\n  parameters that are used to customize the template project: the\r\n  *project name* and the *project prefix*. In the template project\r\n  they are represented by **labdoo** and **lbd**, which are then replaced\r\n  in the new project by the new projectâ€™s name and prefix.\r\n\r\n  Why these strange names? Why not use something like **example** and\r\n  **xmp**, or **sample** and **smp**, or **template** and **tmp** etc.\r\n\r\n  The main reason is exactly that they are strange names and so there\r\n  is no risk of collision with other names used in a project. For\r\n  example **xmp** or **template** or **tmp** maybe are used on the project\r\n  for something else as well, and replacing them blindly with a new\r\n  value may break the application.\r\n\r\n\r\n## Install the new project\r\n\r\n  Installation is done inside a Docker container. For instructions\r\n  about installing Docker see: https://docs.docker.com/installation/\r\n\r\n  + Modify and customize the settings:\r\n    ```\r\n    cp myproject/install/settings.sh cfg.sh\r\n    vim cfg.sh\r\n    ```\r\n\r\n  + Build a Docker image:\r\n    ```\r\n    myproject/docker-build.sh cfg.sh\r\n    tail -f nohup-myproject-master.out\r\n    less -r nohup-myproject-master.out\r\n    ```\r\n    This will create a docker image, named `myproject:master` with a\r\n    minimal ubuntu system and everything that is needed for the normal\r\n    work of the Drupal application.\r\n\r\n  + Create a Docker container like this:\r\n    ```\r\n    docker images\r\n    docker create --name=myproject --hostname=example.org \\\r\n\t       -p 80:80 -p 443:443 myproject:master\r\n    ```\r\n    Then you can start and stop the container with `docker start myproject`\r\n    and `docker stop myproject`.\r\n\r\n  If it is installed on a local machine (for testing or development),\r\n  add the domain name `example.org` on `/etc/hosts`:\r\n  ```\r\n  127.0.0.1 example.org\r\n  ```\r\n  This way it can be accessed by typing `https://example.org`\r\n  on the browser location (not `https://127.0.0.1` or\r\n  `https://localhost`).\r\n\r\n\r\n## Documentation\r\n\r\n  - Internal doc files:\r\n    + [README.org](https://github.com/dashohoxha/dbox/blob/master/README.org) (this file)\r\n    + [dev/README.org](https://github.com/dashohoxha/dbox/blob/master/dev/README.org) (tips for developers)\r\n    + [modules/features/README.org](https://github.com/dashohoxha/dbox/blob/master/modules/features/README.org)\r\n\r\n  - External docs:\r\n    + http://info.btranslator.org/docs/html/btranslator-dev-tips.html\r\n    + http://dashohoxha.fs.al/using-drupal-features-in-btranslator/\r\n    + http://dashohoxha.fs.al/cloning-btranslator-server/\r\n\r\n  - Other docs that may help:\r\n    + http://info.btranslator.org/docker-workshop/\r\n    + http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/\r\n    + http://dashohoxha.fs.al/how-to-secure-ubuntu-server/\r\n    + http://dashohoxha.fs.al/howto-manage-your-own-nameserver/\r\n    + http://www.havetheknowhow.com/Configure-the-server/Install-ssmtp.html\r\n    + http://arstechnica.com/security/2009/12/how-to-get-set-with-a-secure-sertificate-for-free/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}